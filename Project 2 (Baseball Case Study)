{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd \n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import plotly\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#We have divided our dataset into train and test .I have removed the WIN Column in test so that we can predict . 20 records are kept in train and 10 records are kept in test as we had in total 30 records in main file. \n",
    "train=pd.read_csv(\"basketball_train.csv\")\n",
    "test=pd.read_csv(\"basketball_test.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10, 16)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#lets check the rows and column in test data \n",
    "test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(20, 17)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#lets check the rows and column in train data \n",
    "train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Runs</th>\n",
       "      <th>At Bats</th>\n",
       "      <th>Hits</th>\n",
       "      <th>Doubles</th>\n",
       "      <th>Triples</th>\n",
       "      <th>HomeRuns</th>\n",
       "      <th>Walks</th>\n",
       "      <th>Strikeouts</th>\n",
       "      <th>Stolen Bases</th>\n",
       "      <th>Runs allowed</th>\n",
       "      <th>Earned Runs</th>\n",
       "      <th>Earned Runs Avg</th>\n",
       "      <th>Combo guard</th>\n",
       "      <th>Shoutout</th>\n",
       "      <th>Saves</th>\n",
       "      <th>Errors</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>683</td>\n",
       "      <td>5527</td>\n",
       "      <td>1351</td>\n",
       "      <td>295</td>\n",
       "      <td>17</td>\n",
       "      <td>177</td>\n",
       "      <td>488</td>\n",
       "      <td>1290</td>\n",
       "      <td>51</td>\n",
       "      <td>613</td>\n",
       "      <td>557</td>\n",
       "      <td>3.43</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>50</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>703</td>\n",
       "      <td>5428</td>\n",
       "      <td>1363</td>\n",
       "      <td>265</td>\n",
       "      <td>13</td>\n",
       "      <td>177</td>\n",
       "      <td>539</td>\n",
       "      <td>1344</td>\n",
       "      <td>57</td>\n",
       "      <td>635</td>\n",
       "      <td>577</td>\n",
       "      <td>3.62</td>\n",
       "      <td>4</td>\n",
       "      <td>13</td>\n",
       "      <td>41</td>\n",
       "      <td>90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>613</td>\n",
       "      <td>5463</td>\n",
       "      <td>1420</td>\n",
       "      <td>236</td>\n",
       "      <td>40</td>\n",
       "      <td>120</td>\n",
       "      <td>375</td>\n",
       "      <td>1150</td>\n",
       "      <td>112</td>\n",
       "      <td>678</td>\n",
       "      <td>638</td>\n",
       "      <td>4.02</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>35</td>\n",
       "      <td>77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>573</td>\n",
       "      <td>5420</td>\n",
       "      <td>1361</td>\n",
       "      <td>251</td>\n",
       "      <td>18</td>\n",
       "      <td>100</td>\n",
       "      <td>471</td>\n",
       "      <td>1107</td>\n",
       "      <td>69</td>\n",
       "      <td>760</td>\n",
       "      <td>698</td>\n",
       "      <td>4.41</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "      <td>44</td>\n",
       "      <td>90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>626</td>\n",
       "      <td>5529</td>\n",
       "      <td>1374</td>\n",
       "      <td>272</td>\n",
       "      <td>37</td>\n",
       "      <td>130</td>\n",
       "      <td>387</td>\n",
       "      <td>1274</td>\n",
       "      <td>88</td>\n",
       "      <td>809</td>\n",
       "      <td>749</td>\n",
       "      <td>4.69</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>35</td>\n",
       "      <td>117</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Runs  At Bats  Hits  Doubles  Triples  HomeRuns  Walks  Strikeouts  \\\n",
       "0   683     5527  1351      295       17       177    488        1290   \n",
       "1   703     5428  1363      265       13       177    539        1344   \n",
       "2   613     5463  1420      236       40       120    375        1150   \n",
       "3   573     5420  1361      251       18       100    471        1107   \n",
       "4   626     5529  1374      272       37       130    387        1274   \n",
       "\n",
       "   Stolen Bases  Runs allowed  Earned Runs  Earned Runs Avg  Combo guard  \\\n",
       "0            51           613          557             3.43            1   \n",
       "1            57           635          577             3.62            4   \n",
       "2           112           678          638             4.02            0   \n",
       "3            69           760          698             4.41            3   \n",
       "4            88           809          749             4.69            1   \n",
       "\n",
       "   Shoutout  Saves  Errors  \n",
       "0        14     50      88  \n",
       "1        13     41      90  \n",
       "2        12     35      77  \n",
       "3        10     44      90  \n",
       "4         7     35     117  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#lets check the top 5 records of test data \n",
    "test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Runs</th>\n",
       "      <th>At Bats</th>\n",
       "      <th>Hits</th>\n",
       "      <th>Doubles</th>\n",
       "      <th>Triples</th>\n",
       "      <th>HomeRuns</th>\n",
       "      <th>Walks</th>\n",
       "      <th>Strikeouts</th>\n",
       "      <th>Stolen Bases</th>\n",
       "      <th>Runs allowed</th>\n",
       "      <th>Earned Runs</th>\n",
       "      <th>Earned Runs Avg</th>\n",
       "      <th>Combo guard</th>\n",
       "      <th>Shoutout</th>\n",
       "      <th>Saves</th>\n",
       "      <th>Errors</th>\n",
       "      <th>Wins</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>724</td>\n",
       "      <td>5575</td>\n",
       "      <td>1497</td>\n",
       "      <td>300</td>\n",
       "      <td>42</td>\n",
       "      <td>139</td>\n",
       "      <td>383</td>\n",
       "      <td>973</td>\n",
       "      <td>104</td>\n",
       "      <td>641</td>\n",
       "      <td>601</td>\n",
       "      <td>3.73</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>56</td>\n",
       "      <td>88</td>\n",
       "      <td>95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>696</td>\n",
       "      <td>5467</td>\n",
       "      <td>1349</td>\n",
       "      <td>277</td>\n",
       "      <td>44</td>\n",
       "      <td>156</td>\n",
       "      <td>439</td>\n",
       "      <td>1264</td>\n",
       "      <td>70</td>\n",
       "      <td>700</td>\n",
       "      <td>653</td>\n",
       "      <td>4.07</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>45</td>\n",
       "      <td>86</td>\n",
       "      <td>83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>669</td>\n",
       "      <td>5439</td>\n",
       "      <td>1395</td>\n",
       "      <td>303</td>\n",
       "      <td>29</td>\n",
       "      <td>141</td>\n",
       "      <td>533</td>\n",
       "      <td>1157</td>\n",
       "      <td>86</td>\n",
       "      <td>640</td>\n",
       "      <td>584</td>\n",
       "      <td>3.67</td>\n",
       "      <td>11</td>\n",
       "      <td>10</td>\n",
       "      <td>38</td>\n",
       "      <td>79</td>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>622</td>\n",
       "      <td>5533</td>\n",
       "      <td>1381</td>\n",
       "      <td>260</td>\n",
       "      <td>27</td>\n",
       "      <td>136</td>\n",
       "      <td>404</td>\n",
       "      <td>1231</td>\n",
       "      <td>68</td>\n",
       "      <td>701</td>\n",
       "      <td>643</td>\n",
       "      <td>3.98</td>\n",
       "      <td>7</td>\n",
       "      <td>9</td>\n",
       "      <td>37</td>\n",
       "      <td>101</td>\n",
       "      <td>76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>689</td>\n",
       "      <td>5605</td>\n",
       "      <td>1515</td>\n",
       "      <td>289</td>\n",
       "      <td>49</td>\n",
       "      <td>151</td>\n",
       "      <td>455</td>\n",
       "      <td>1259</td>\n",
       "      <td>83</td>\n",
       "      <td>803</td>\n",
       "      <td>746</td>\n",
       "      <td>4.64</td>\n",
       "      <td>7</td>\n",
       "      <td>12</td>\n",
       "      <td>35</td>\n",
       "      <td>86</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Runs  At Bats  Hits  Doubles  Triples  HomeRuns  Walks  Strikeouts  \\\n",
       "0   724     5575  1497      300       42       139    383         973   \n",
       "1   696     5467  1349      277       44       156    439        1264   \n",
       "2   669     5439  1395      303       29       141    533        1157   \n",
       "3   622     5533  1381      260       27       136    404        1231   \n",
       "4   689     5605  1515      289       49       151    455        1259   \n",
       "\n",
       "   Stolen Bases  Runs allowed  Earned Runs  Earned Runs Avg  Combo guard  \\\n",
       "0           104           641          601             3.73            2   \n",
       "1            70           700          653             4.07            2   \n",
       "2            86           640          584             3.67           11   \n",
       "3            68           701          643             3.98            7   \n",
       "4            83           803          746             4.64            7   \n",
       "\n",
       "   Shoutout  Saves  Errors  Wins  \n",
       "0         8     56      88    95  \n",
       "1        12     45      86    83  \n",
       "2        10     38      79    81  \n",
       "3         9     37     101    76  \n",
       "4        12     35      86    74  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#lets check the top 5 records of train data \n",
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Runs</th>\n",
       "      <td>20.0</td>\n",
       "      <td>698.9500</td>\n",
       "      <td>60.446127</td>\n",
       "      <td>622.00</td>\n",
       "      <td>655.750</td>\n",
       "      <td>691.500</td>\n",
       "      <td>725.25</td>\n",
       "      <td>891.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>At Bats</th>\n",
       "      <td>20.0</td>\n",
       "      <td>5524.6500</td>\n",
       "      <td>64.311147</td>\n",
       "      <td>5417.00</td>\n",
       "      <td>5483.000</td>\n",
       "      <td>5510.000</td>\n",
       "      <td>5572.00</td>\n",
       "      <td>5640.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hits</th>\n",
       "      <td>20.0</td>\n",
       "      <td>1405.4000</td>\n",
       "      <td>54.746689</td>\n",
       "      <td>1331.00</td>\n",
       "      <td>1376.000</td>\n",
       "      <td>1384.500</td>\n",
       "      <td>1429.75</td>\n",
       "      <td>1515.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Doubles</th>\n",
       "      <td>20.0</td>\n",
       "      <td>277.4500</td>\n",
       "      <td>17.825101</td>\n",
       "      <td>243.00</td>\n",
       "      <td>269.500</td>\n",
       "      <td>277.500</td>\n",
       "      <td>289.75</td>\n",
       "      <td>308.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Triples</th>\n",
       "      <td>20.0</td>\n",
       "      <td>30.8000</td>\n",
       "      <td>9.282695</td>\n",
       "      <td>17.00</td>\n",
       "      <td>25.000</td>\n",
       "      <td>29.500</td>\n",
       "      <td>35.25</td>\n",
       "      <td>49.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HomeRuns</th>\n",
       "      <td>20.0</td>\n",
       "      <td>169.7000</td>\n",
       "      <td>31.659538</td>\n",
       "      <td>136.00</td>\n",
       "      <td>144.000</td>\n",
       "      <td>164.000</td>\n",
       "      <td>181.50</td>\n",
       "      <td>232.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Walks</th>\n",
       "      <td>20.0</td>\n",
       "      <td>474.4500</td>\n",
       "      <td>53.875563</td>\n",
       "      <td>383.00</td>\n",
       "      <td>435.750</td>\n",
       "      <td>476.500</td>\n",
       "      <td>503.75</td>\n",
       "      <td>570.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Strikeouts</th>\n",
       "      <td>20.0</td>\n",
       "      <td>1247.1000</td>\n",
       "      <td>115.045940</td>\n",
       "      <td>973.00</td>\n",
       "      <td>1155.500</td>\n",
       "      <td>1257.000</td>\n",
       "      <td>1313.00</td>\n",
       "      <td>1518.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Stolen Bases</th>\n",
       "      <td>20.0</td>\n",
       "      <td>83.2500</td>\n",
       "      <td>21.843643</td>\n",
       "      <td>44.00</td>\n",
       "      <td>69.000</td>\n",
       "      <td>83.500</td>\n",
       "      <td>95.75</td>\n",
       "      <td>134.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Runs allowed</th>\n",
       "      <td>20.0</td>\n",
       "      <td>682.1000</td>\n",
       "      <td>65.916135</td>\n",
       "      <td>525.00</td>\n",
       "      <td>640.750</td>\n",
       "      <td>695.500</td>\n",
       "      <td>730.00</td>\n",
       "      <td>803.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Earned Runs</th>\n",
       "      <td>20.0</td>\n",
       "      <td>629.6500</td>\n",
       "      <td>64.749944</td>\n",
       "      <td>478.00</td>\n",
       "      <td>596.750</td>\n",
       "      <td>644.500</td>\n",
       "      <td>677.75</td>\n",
       "      <td>746.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Earned Runs Avg</th>\n",
       "      <td>20.0</td>\n",
       "      <td>3.9095</td>\n",
       "      <td>0.415229</td>\n",
       "      <td>2.94</td>\n",
       "      <td>3.715</td>\n",
       "      <td>4.005</td>\n",
       "      <td>4.18</td>\n",
       "      <td>4.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Combo guard</th>\n",
       "      <td>20.0</td>\n",
       "      <td>3.8000</td>\n",
       "      <td>2.930780</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.750</td>\n",
       "      <td>3.000</td>\n",
       "      <td>6.00</td>\n",
       "      <td>11.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Shoutout</th>\n",
       "      <td>20.0</td>\n",
       "      <td>11.1000</td>\n",
       "      <td>3.552612</td>\n",
       "      <td>4.00</td>\n",
       "      <td>9.000</td>\n",
       "      <td>11.000</td>\n",
       "      <td>12.25</td>\n",
       "      <td>21.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Saves</th>\n",
       "      <td>20.0</td>\n",
       "      <td>43.9000</td>\n",
       "      <td>8.955445</td>\n",
       "      <td>28.00</td>\n",
       "      <td>37.750</td>\n",
       "      <td>44.000</td>\n",
       "      <td>48.00</td>\n",
       "      <td>62.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Errors</th>\n",
       "      <td>20.0</td>\n",
       "      <td>97.1000</td>\n",
       "      <td>14.308260</td>\n",
       "      <td>77.00</td>\n",
       "      <td>87.500</td>\n",
       "      <td>93.500</td>\n",
       "      <td>103.50</td>\n",
       "      <td>126.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Wins</th>\n",
       "      <td>20.0</td>\n",
       "      <td>82.9000</td>\n",
       "      <td>10.361365</td>\n",
       "      <td>64.00</td>\n",
       "      <td>76.000</td>\n",
       "      <td>82.000</td>\n",
       "      <td>89.25</td>\n",
       "      <td>100.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 count       mean         std      min       25%       50%  \\\n",
       "Runs              20.0   698.9500   60.446127   622.00   655.750   691.500   \n",
       "At Bats           20.0  5524.6500   64.311147  5417.00  5483.000  5510.000   \n",
       "Hits              20.0  1405.4000   54.746689  1331.00  1376.000  1384.500   \n",
       "Doubles           20.0   277.4500   17.825101   243.00   269.500   277.500   \n",
       "Triples           20.0    30.8000    9.282695    17.00    25.000    29.500   \n",
       "HomeRuns          20.0   169.7000   31.659538   136.00   144.000   164.000   \n",
       "Walks             20.0   474.4500   53.875563   383.00   435.750   476.500   \n",
       "Strikeouts        20.0  1247.1000  115.045940   973.00  1155.500  1257.000   \n",
       "Stolen Bases      20.0    83.2500   21.843643    44.00    69.000    83.500   \n",
       "Runs allowed      20.0   682.1000   65.916135   525.00   640.750   695.500   \n",
       "Earned Runs       20.0   629.6500   64.749944   478.00   596.750   644.500   \n",
       "Earned Runs Avg   20.0     3.9095    0.415229     2.94     3.715     4.005   \n",
       "Combo guard       20.0     3.8000    2.930780     0.00     1.750     3.000   \n",
       "Shoutout          20.0    11.1000    3.552612     4.00     9.000    11.000   \n",
       "Saves             20.0    43.9000    8.955445    28.00    37.750    44.000   \n",
       "Errors            20.0    97.1000   14.308260    77.00    87.500    93.500   \n",
       "Wins              20.0    82.9000   10.361365    64.00    76.000    82.000   \n",
       "\n",
       "                     75%      max  \n",
       "Runs              725.25   891.00  \n",
       "At Bats          5572.00  5640.00  \n",
       "Hits             1429.75  1515.00  \n",
       "Doubles           289.75   308.00  \n",
       "Triples            35.25    49.00  \n",
       "HomeRuns          181.50   232.00  \n",
       "Walks             503.75   570.00  \n",
       "Strikeouts       1313.00  1518.00  \n",
       "Stolen Bases       95.75   134.00  \n",
       "Runs allowed      730.00   803.00  \n",
       "Earned Runs       677.75   746.00  \n",
       "Earned Runs Avg     4.18     4.64  \n",
       "Combo guard         6.00    11.00  \n",
       "Shoutout           12.25    21.00  \n",
       "Saves              48.00    62.00  \n",
       "Errors            103.50   126.00  \n",
       "Wins               89.25   100.00  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#lets observe the count mean and quartile \n",
    "#observation 1 : minimum 622 runs is scored everytime \n",
    "#oberservation 2 : 698 is the avg run scored \n",
    "#minimum 243 doubles is scored everytime \n",
    "train.describe().transpose()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(20, 17)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10, 16)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 20 entries, 0 to 19\n",
      "Data columns (total 17 columns):\n",
      " #   Column           Non-Null Count  Dtype  \n",
      "---  ------           --------------  -----  \n",
      " 0   Runs             20 non-null     int64  \n",
      " 1   At Bats          20 non-null     int64  \n",
      " 2   Hits             20 non-null     int64  \n",
      " 3   Doubles          20 non-null     int64  \n",
      " 4   Triples          20 non-null     int64  \n",
      " 5   HomeRuns         20 non-null     int64  \n",
      " 6   Walks            20 non-null     int64  \n",
      " 7   Strikeouts       20 non-null     int64  \n",
      " 8   Stolen Bases     20 non-null     int64  \n",
      " 9   Runs allowed     20 non-null     int64  \n",
      " 10  Earned Runs      20 non-null     int64  \n",
      " 11  Earned Runs Avg  20 non-null     float64\n",
      " 12  Combo guard      20 non-null     int64  \n",
      " 13  Shoutout         20 non-null     int64  \n",
      " 14  Saves            20 non-null     int64  \n",
      " 15  Errors           20 non-null     int64  \n",
      " 16  Wins             20 non-null     int64  \n",
      "dtypes: float64(1), int64(16)\n",
      "memory usage: 2.8 KB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 10 entries, 0 to 9\n",
      "Data columns (total 16 columns):\n",
      " #   Column           Non-Null Count  Dtype  \n",
      "---  ------           --------------  -----  \n",
      " 0   Runs             10 non-null     int64  \n",
      " 1   At Bats          10 non-null     int64  \n",
      " 2   Hits             10 non-null     int64  \n",
      " 3   Doubles          10 non-null     int64  \n",
      " 4   Triples          10 non-null     int64  \n",
      " 5   HomeRuns         10 non-null     int64  \n",
      " 6   Walks            10 non-null     int64  \n",
      " 7   Strikeouts       10 non-null     int64  \n",
      " 8   Stolen Bases     10 non-null     int64  \n",
      " 9   Runs allowed     10 non-null     int64  \n",
      " 10  Earned Runs      10 non-null     int64  \n",
      " 11  Earned Runs Avg  10 non-null     float64\n",
      " 12  Combo guard      10 non-null     int64  \n",
      " 13  Shoutout         10 non-null     int64  \n",
      " 14  Saves            10 non-null     int64  \n",
      " 15  Errors           10 non-null     int64  \n",
      "dtypes: float64(1), int64(15)\n",
      "memory usage: 1.4 KB\n"
     ]
    }
   ],
   "source": [
    "test.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(train['Wins'])\n",
    "plt.xlabel('Wins')\n",
    "plt.title('Histogram of Wins')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Wins')"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#ScatterPlot Diagram of Wins wrt Runs \n",
    "plt.scatter(train['Runs'],train['Wins'])\n",
    "plt.title('Wins with Runs')\n",
    "plt.xlabel('Runs')\n",
    "plt.ylabel('Wins')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Doubles')"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#ScatterPlot Diagram of Runs wrt Doubles   \n",
    "plt.scatter(train['Runs'],train['Doubles'])\n",
    "plt.title('Runs with Doubles')\n",
    "plt.xlabel('Runs')\n",
    "plt.ylabel('Doubles')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAWwAAAEXCAYAAACJen67AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAVMklEQVR4nO3deZRcZZnH8W/M0oEoOiq4jYiO5gmmRbQAR4ERBPXgATMqijuoiFtcg44LKDIyrujojIoLCI77wQURUQSDiqJCAUJDfNwdxThuR9EgHRIzf9zbUr3fVLq68la+n3P6dNfte+t93r7dv3r7rbpvLdiyZQuSpO3frfpdgCSpGQNbkgphYEtSIQxsSSqEgS1JhTCwJakQi/pdgPovIrYAu2bm7zq2HQMcmZmHR8TJwI8y88Mz3Mdrge9l5jk9L3iORcTewKeBPwKPy8yfdXzvYuC/M/Psjm17ACOZeet5qO1i4B7An+pNC4Eh4A0znQ8NJgNbs8rM1zbY7WHAdb2upUceDazNzGP7Xcg0Xj7hAWMf4JsR8dnM/HMf69I8M7A1q4g4k2pE+baIeD3wGGAj8HvgGOCxwD7AWyNiM/BV4N3A3sAW4Hzg1Zm5KSIeBbwZ2AxcBRwKHAAcBDwLWEY1mjwceC9wH+AOwJ+BJ2dm1qPONvDPwG7A+4E7Aw+tj39CZl4zRT9OBJ4EbAJ+AKwGDgGeDyyMiJ0y8yld/Hwm3W9m/rppnRFxW+CdwP2AxcBFVCG9aZom7wVsAEYj4iCq/wCG61r+fjsiTgL2AO5CNUq/HnhqZq7f2j5q++ActsasjYirxj6AkyfuEBF3B14C7JuZ+wAXAA/KzHcDl1OFzGeBd1GF+f2ogvz+wPERcQfgf6hCY29gLXC3jiZWAgdl5sHAYcAfM/PBmbkcuIwqYMfskZn7A08F3gJcXNf0JeCFU9T+jPo+983MvYAR4MzM/ChwGvDJGcL6rRN+Nl+c7X63ss53AO3MbAEPAO4IvGyK9n8eEf9H9YB5SGZunKbeTgcCj8/MFVQh/9wGx2g75QhbYw6eag57wj7XA98DroiI84HzM/OiKe7rMGD/zNxCNQo8jSroE7guM78HkJlnRcS7Oo67OjNvqL93dkT8JCJeCNybagR+ace+n6k//7j+/KWO2wdNU9OHMnNDffudwGsiYskU+040cUpiD6pgbnK/Teo8HNgvIp5V395pqvYjYleqB4tfZuaVDeqG6gHihvrrK4HbNzxO2yFH2GosM/9G9e/8MVQj6HdExFum2PVWVFMhnbcXU00ZLJiw7986vv7L2BcR8TzgdOBG4GPAxyccOzqhtptnKX/hFDUtmqKerTXb/TapcyHVKHjv+j+PBzH+v4mxY38LHAW8ICIeW2/ewvg+THwA+mvH1xP3VWEMbDUWEfenGlmuy8w3Uv0rv2/97U1UoQzwZWB1RCyIiCHgOOArwDeB5RGxV31/jwNux/jAG/NIqimL06lG5kdQBVu3vgQ8MyKW1bdfBHw9M0dnOGa+7vfLwEs7fl6fZ4rABsjMnwCnAO+s2/wtsHtE7BYRC4AndtsRbf8MbDVWT2V8Crg8Ii4Hnsktc62fB94YEUdThdZuwDX1RwKnZOYfqJ6c+3BEXEEVypuoRtETvQ14TkRcDXwDuIJqaqRbpwMXAt+NiHXAA4GtfoKxR/f7IqonIa8Brq4/T/Wfy5i3UY2cT8jM64D3UT2H8G3gp1vZtgqywOVVNV8iYhfgBOCkzLwxIh4InAfctZ7vljQDA1vzKiLeQPUqh5vrj5dl5jf6W5VUBgNbkgrhHLYkFcLAlqRC9OzCmXa7PUT1kq/1VJchS5Jmt5BqOYHLWq3WuJeH9vJKx32pXo4lSdp6BwKXdG7oZWCvB1i+fDlLljS5+nfbjYyMMDw8PC9tbW925L7Djt1/+z5Yfd+4cSM/+MEPoM7QTr0M7M0AS5YsYWhoqIfNjDefbW1vduS+w47df/s+kCZNJfukoyQVwsCWpEIY2JJUCANbkgrR6EnHiDgCeB3VimIXZOaLe1qVJGmSWUfYEXEvqrdQ+ldgL+CBEXFYrwuTJI3XZIT9GKr3u/slQEQcBdzU06okSZPMulpfRLyX6h2y7wnsDnwBOHG29Yvb7fYebMNi6iv2XMmynZd2e/g22XDjTXx/3bV9aVuSavdstVo/69zQZIS9CPgXqjcM/QvVO4sczfh3hp7W8PBw1y9sP2LNOV0dt63OPXUVrVarL213q91uF1fzXNqR+2/fB6vvo6OjjIyMTPm9Jq8S+TVwYWb+NjP/CnwW2G8O65MkNdBkhP0F4KyIuB3wZ+Aw4HM9rUqSNMmsI+zM/A7VG4JeAlwH/Bz4UI/rkiRN0Oh12Jl5BnBGj2uRJM3AKx0lqRAGtiQVwsCWpEIY2JJUCANbkgphYEtSIQxsSSqEgS1JhTCwJakQBrYkFcLAlqRCGNiSVAgDW5IKYWBLUiEMbEkqhIEtSYUwsCWpEAa2JBXCwJakQhjYklQIA1uSCmFgS1IhDGxJKoSBLUmFMLAlqRCLmuwUEWuB3YCb603Pyczv9KwqSdIkswZ2RCwAlgP3yMxNvS9JkjSVJlMiUX++ICK+FxGre1mQJGlqTQL7H4CLgMcAhwDPjYiH97QqSdIks06JZOalwKVjtyPidOBRwFeaNDAyMtJVYa1Wq6vj5kq73e5r+90osea5tCP3377vGJrMYR8ADGXmRfWmBdzy5OOshoeHGRoa6rK8/un3A8bWarfbxdU8l3bk/tv3wer76OjotAPdJq8SuR1wckQ8BFgMHA08d+7KkyQ1MescdmZ+ATgPuBJoA2fU0ySSpHnU6HXYmXkicGKPa5EkzcArHSWpEAa2JBXCwJakQhjYklQIA1uSCmFgS1IhDGxJKoSBLUmFMLAlqRAGtiQVwsCWpEIY2JJUCANbkgphYEtSIQxsSSqEgS1JhTCwJakQBrYkFcLAlqRCGNiSVAgDW5IKYWBLUiEMbEkqhIEtSYUwsCWpEAa2JBWicWBHxNsi4swe1iJJmkGjwI6IQ4Cje1yLJGkGswZ2RNweOAX4j96XI0mazqIG+7wPeA1w924aGBkZ6eYwWq1WV8fNlXa73df2u9FtzSv2XMmynZfOcTXNbLjxJr6/7to5ua8Sz9lcse87hhkDOyKOBX6RmRdFxDHdNDA8PMzQ0FA3h/ZVvx8wtla73d6mmo9Yc84cVtPcuaeumpOf9bb2v2T2fbD6Pjo6Ou1Ad7YpkaOAR0TEVcDJwKMj4h1zXJ8kqYEZR9iZ+fCxr+sR9kGZ+dJeFyVJmszXYUtSIZo86QhAZp4JnNmzSiRJM3KELUmFMLAlqRAGtiQVwsCWpEIY2JJUCANbkgphYEtSIQxsSSqEgS1JhTCwJakQBrYkFcLAlqRCGNiSVAgDW5IKYWBLUiEMbEkqhIEtSYUwsCWpEAa2JBXCwJakQhjYklQIA1uSCmFgS1IhDGxJKoSBLUmFWNRkp4g4GTgS2AKcnplv72lVkqRJZh1hR8RDgYcBewH7AC+MiOh1YZKk8WYN7Mz8GnBwZm4CdqMalW/odWGSpPEazWFn5s0R8XrgOuAi4PqeViVJmqTRHDZAZr4uIt4MnAs8G3h/k+NGRka6KqzVanV13Fxpt9t9bb8b3dY8KD/rEs/ZXLHvO4ZZAzsiVgBLM/OqzLwxIj5DNZ/dyPDwMENDQ9tSY1/0O8S2VrvdLq7mMXNRd8n931b2fbD6Pjo6Ou1At8kI+17A6yPiAKpXiawCzpi78iRJTTR50vGLwHnAlUAb+FZmfqLXhUmSxms0h52ZJwEn9bQSSdKMvNJRkgphYEtSIQxsSSqEgS1JhTCwJakQBrYkFcLAlqRCGNiSVAgDW5IKYWBLUiEMbEkqhIEtSYUwsCWpEAa2JBXCwJakQhjYklQIA1uSCmFgS1IhDGxJKoSBLUmFMLAlqRAGtiQVwsCWpEIY2JJUCANbkgphYEtSIRY12SkiXgc8ob55Xma+onclSZKmMusIOyIOBR4BPADYG2hFxGN6XZgkabwmI+z1wJrM3AgQEeuA3XtalSRpklkDOzOvHfs6Iu5DNTWyf9MGRkZGuiqs1Wp1ddxc2HjzZpYsXjjv7Y5u3MTQkkazVJP08+e1rdrt9nZ1PyWy71NbsedKlu28dB6rucWGG2/i++uunX3HrdA4HSJiJXAe8PLM/GHT44aHhxkaGuqmtr5ZsnghR6w5Z97bPffUVX1rt5/m4sGm3W4X/aC1Lez7zH3vx98UVH9X3ZyX0dHRaQe6jV4lEhH7AxcBr8zMs7a6AknSNpt1hB0Rdwc+BxyVmV/tfUmSpKk0mRI5HlgKvD0ixradlpmn9awqSdIkTZ50fDHw4nmoRZI0A690lKRCGNiSVAgDW5IKYWBLUiEMbEkqhIEtSYUwsCWpEAa2JBXCwJakQhjYklQIA1uSCmFgS1IhDGxJKoSBLUmFMLAlqRAGtiQVwsCWpEIY2JJUCANbkgphYEtSIQxsSSqEgS1JhTCwJakQBrYkFcLAlqRCLGq6Y0TsAnwLODwzf9aziiRJU2o0wo6IBwGXAMt7W44kaTpNp0SeDbwA+FUPa5EkzaDRlEhmHgsQEb2tRpI0rcZz2N0aGRnp6rhWqzXHlWh7tPHmzSxZvHCb72drf1823HgT31937Ta3240Ve65k2c5L5+z+mvZ9dOMmhpb0/E9+Xtve3nOi3W7P6f31/OwNDw8zNDTU62ZUqCWLF3LEmnPmvd1zT13V1z/2fvW5H+32s+1zT10172126uZ3bHR0dNqBri/rk6RCGNiSVIitmhLJzD16VIckaRaOsCWpEAa2JBXCwJakQhjYklQIA1uSCmFgS1IhDGxJKoSBLUmFMLAlqRAGtiQVwsCWpEIY2JJUCANbkgphYEtSIQxsSSqEgS1JhTCwJakQBrYkFcLAlqRCGNiSVAgDW5IKYWBLUiEMbEkqhIEtSYUwsCWpEAa2JBViUZOdIuLJwAnAYuA/M/PdPa1KkjTJrCPsiLgbcApwALA3cFxE3LfXhUmSxmsywj4U+Gpm/gEgIs4GjgROnuW4hQAbN27surjbLVvY9bHbYnR0tC9t72jt9rPt0dHReW+zk+d5sNsda7sbHZk5qfAFW7ZsmfHgiHgVsCwzT6hvHwvsl5nHzXRcu90+APhGNwVLkjiw1Wpd0rmhyQj7VkBnqi8A/tbguMuAA4H1wOamFUrSDm4hcBeqDB2nSWD/kip4x9wZ+NVsB7VarVHgktn2kyRN8uOpNjYJ7AuBkyJiV2AD8DhgxukQSdLcm/VVIpl5PfAaYC1wFfCxzPxurwuTJI0365OOkqTtg1c6SlIhDGxJKoSBLUmFMLAlqRCNFn/ankTELsC3gMMz82cd21cDR2bmQfXt3YGPALsBCTwlM/8y7wXPoYl9j4gHA+8AbgNcDRydmRsjYm/gg8AuwNeB52bmpn7VPVem6P8jgLdSXWhwBXBs3f+BOvcR8TrgCfXN8zLzFRFxKPB2YCfgkx1XIg/cuZ+m/8cBL6K6qO9y4DmD/Ls/pqgRdkQ8iOpinOUTtt8XeOWE3d8DvCczV1Cd0BPnpcgemdj3Orw+AxyXmSvr3Z5Vf/4IsDozl1NdmfrseS53zk1z7k8HnpiZw8DOwNPr7QNz7utgfgTwAKrF11oR8STgDGAVsCewb0QcVh8yUOd+mv7/G/By4CHAXlQ59oL6kIHq/0RFBTbVD/8FdFxpGRFDwPuA13ZsWwz8C3B2velM4PHzVmVvTOz7w4FLM/Pq+vYLgc9GxD2AnTLz2/X2Mym/7zDFuacaWe8SEQuBpcBfB/DcrwfWZObGzLwZWEf1oPXDzPxpPXr8CPD4AT33U/V/KfD8zLwhM7cA1wC7D2j/xylqSiQzjwWIiM7Nb6Qabfy0Y9sdgRs6/hVaD/zjfNTYK1P0/d7AXyLiE8AK4JvAGqqRyPqOQ4vvO0x77p8PXAzcQHX+z2bAzn1mXjv2dUTch2pq4L+Y+hzfdZrtxZqm//tn5g/rbbsCq4FjGMD+T1TaCHuciHg4sHtmfmjCtyYuWAXNFqwqySLgkcCrgBawjGpaqNvFuooSEXcG3gQMUy2U822qOd2BPPcRsRL4CtVUwE+Y+hwP7Lnv7H9HWN8NuAg4PTMvZoD7P6bowAaeBKyMiKuonmjYJyI+CfwGuG39rzJUf9CzLlhVmF8D367/Ld4MfArYj2qxrrt07Ndosa4CHQiMZOaPM/NvwAeAgxjAcx8R+1MF0ysz8yymP8cDee6n6D8RsYLqCeizMvPf610Hsv+dig7szHxmZu6ZmXsDxwKXZ+ZR9VzXN4Cj6l2fDpzfrzp75AKqJ2DuXt8+HGhn5s+Bm+pfcoCnMXh9BxgB9ouIO9W3VwGXDdq5r8/v54AnZ+Yn6s3fqb4V964fmJ4MnD+I536q/kfEbah+/0/IzFPH9h3E/k9U1Bz2Vno+cFZEnAD8L9VofGBk5i8i4jnAuRGxlGphruPrbz8F+ED9SpIrgHf1qcyeycx1EXEisDYiNgE/4pZVJAfp3B9P9STb2zvm70+jmrP9dP29L3LLk6yDdu6n6v8ngTsBayJiTb3t85n5Wgav/+O4+JMkFaLoKRFJ2pEY2JJUCANbkgphYEtSIQxsSSrEIL+sTwWKiC3Arpn5u45tx1CtxHj4PLU/AmymumpuZ6pL35+XmZf3un1pJga2NNnBEx4wjqdav+PB/StJMrBVmIi4LfBuqqU2t1BdyfbqzNwUETdRrSdyKHBr4CSq1druR3WJ8hGZuSEi9gTeCdyBasW/d2XmGdO0twjYHfhDffsk4I6ZuXri7Yi4GLgU2L8+5kKq5W8Haj0L9Y+Bre3R2ojY3HH79lRv0ADVlWu/pwrhJcDnqa6GexMwBPw6M/er10z+INV60euBy4BVEfEpqqsCn5aZV9QPAJdGxHUdy3KuradG7gjcBHwBeEbD2v+Jak2TW1MtBfpQYO1W9l+akoGt7dHEKYljgCPrm4dRLa+5BRiNiNOAl1AFNlSXawP8GLgmM6+v7+OnVMG/nCpUz+i41HknqmVpxwL74Mz8XUQ8kOqy77WZ+ZuGtZ9bj6hviIgf1W1Kc8LAVmkmLqF5K2Bxx+3Rjq9vnuL4hcCf6gXDAKgXkPrTxB3rEfhLgTMj4sr6Lem2UC3bOWbJhMP+2vH1xH2lbeLL+lSaLwOrI2JB/W5Dx1Gtk9xUUr0zzVPh76vBjVCtKT5558yPA9+leu9MgN9SrZK4oF41ruevXJHGGNgqzYuo3lz3mvojgVOaHpyZG6mWYj02Iq6mWqbzxMz85gyHrQYeFRGPBD5KFdo/pJrb/lo3nZC64Wp9klQIR9iSVAgDW5IKYWBLUiEMbEkqhIEtSYUwsCWpEAa2JBXCwJakQvw/27ubn1uUBpsAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#140 homeruns scored 6 times\n",
    "plt.hist(train['HomeRuns'])\n",
    "plt.xlabel('HomeRun')\n",
    "plt.title('Histogram of HomeRun')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'HomeRuns')"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#ScatterPlot Diagram of Wins wrt HomeRuns   \n",
    "plt.scatter(train['Wins'],train['HomeRuns'])\n",
    "plt.title('Wins with HomeRuns')\n",
    "plt.xlabel('Wins')\n",
    "plt.ylabel('HomeRuns')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x17bbe6746c8>"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#strong correlation between earned runs , runs allower and earned runs avg\n",
    "sns.heatmap(train.corr(), cmap='coolwarm')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Runs               0.372940\n",
       "At Bats           -0.149731\n",
       "Hits               0.107889\n",
       "Doubles            0.375276\n",
       "Triples           -0.151249\n",
       "HomeRuns           0.103230\n",
       "Walks              0.298022\n",
       "Strikeouts         0.078998\n",
       "Stolen Bases      -0.015464\n",
       "Runs allowed      -0.777921\n",
       "Earned Runs       -0.775920\n",
       "Earned Runs Avg   -0.781226\n",
       "Combo guard       -0.109884\n",
       "Shoutout           0.319136\n",
       "Saves              0.649907\n",
       "Errors            -0.002414\n",
       "Wins               1.000000\n",
       "Name: Wins, dtype: float64"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Strong Correlation between Saves and Win can be seen of 0.64\n",
    "train.corr()['Wins']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Wins')"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#ScatterPlot Diagram of Saves wrt Wins   \n",
    "plt.scatter(train['Saves'],train['Wins'])\n",
    "plt.title('Saves with Wins')\n",
    "plt.xlabel('Saves')\n",
    "plt.ylabel('Wins')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "target = train[\"Wins\"]\n",
    "data = train.drop([\"Wins\"],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Runs</th>\n",
       "      <th>At Bats</th>\n",
       "      <th>Hits</th>\n",
       "      <th>Doubles</th>\n",
       "      <th>Triples</th>\n",
       "      <th>HomeRuns</th>\n",
       "      <th>Walks</th>\n",
       "      <th>Strikeouts</th>\n",
       "      <th>Stolen Bases</th>\n",
       "      <th>Runs allowed</th>\n",
       "      <th>Earned Runs</th>\n",
       "      <th>Earned Runs Avg</th>\n",
       "      <th>Combo guard</th>\n",
       "      <th>Shoutout</th>\n",
       "      <th>Saves</th>\n",
       "      <th>Errors</th>\n",
       "      <th>Wins</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>724</td>\n",
       "      <td>5575</td>\n",
       "      <td>1497</td>\n",
       "      <td>300</td>\n",
       "      <td>42</td>\n",
       "      <td>139</td>\n",
       "      <td>383</td>\n",
       "      <td>973</td>\n",
       "      <td>104</td>\n",
       "      <td>641</td>\n",
       "      <td>601</td>\n",
       "      <td>3.73</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>56</td>\n",
       "      <td>88</td>\n",
       "      <td>95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>696</td>\n",
       "      <td>5467</td>\n",
       "      <td>1349</td>\n",
       "      <td>277</td>\n",
       "      <td>44</td>\n",
       "      <td>156</td>\n",
       "      <td>439</td>\n",
       "      <td>1264</td>\n",
       "      <td>70</td>\n",
       "      <td>700</td>\n",
       "      <td>653</td>\n",
       "      <td>4.07</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>45</td>\n",
       "      <td>86</td>\n",
       "      <td>83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>669</td>\n",
       "      <td>5439</td>\n",
       "      <td>1395</td>\n",
       "      <td>303</td>\n",
       "      <td>29</td>\n",
       "      <td>141</td>\n",
       "      <td>533</td>\n",
       "      <td>1157</td>\n",
       "      <td>86</td>\n",
       "      <td>640</td>\n",
       "      <td>584</td>\n",
       "      <td>3.67</td>\n",
       "      <td>11</td>\n",
       "      <td>10</td>\n",
       "      <td>38</td>\n",
       "      <td>79</td>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>622</td>\n",
       "      <td>5533</td>\n",
       "      <td>1381</td>\n",
       "      <td>260</td>\n",
       "      <td>27</td>\n",
       "      <td>136</td>\n",
       "      <td>404</td>\n",
       "      <td>1231</td>\n",
       "      <td>68</td>\n",
       "      <td>701</td>\n",
       "      <td>643</td>\n",
       "      <td>3.98</td>\n",
       "      <td>7</td>\n",
       "      <td>9</td>\n",
       "      <td>37</td>\n",
       "      <td>101</td>\n",
       "      <td>76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>689</td>\n",
       "      <td>5605</td>\n",
       "      <td>1515</td>\n",
       "      <td>289</td>\n",
       "      <td>49</td>\n",
       "      <td>151</td>\n",
       "      <td>455</td>\n",
       "      <td>1259</td>\n",
       "      <td>83</td>\n",
       "      <td>803</td>\n",
       "      <td>746</td>\n",
       "      <td>4.64</td>\n",
       "      <td>7</td>\n",
       "      <td>12</td>\n",
       "      <td>35</td>\n",
       "      <td>86</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Runs  At Bats  Hits  Doubles  Triples  HomeRuns  Walks  Strikeouts  \\\n",
       "0   724     5575  1497      300       42       139    383         973   \n",
       "1   696     5467  1349      277       44       156    439        1264   \n",
       "2   669     5439  1395      303       29       141    533        1157   \n",
       "3   622     5533  1381      260       27       136    404        1231   \n",
       "4   689     5605  1515      289       49       151    455        1259   \n",
       "\n",
       "   Stolen Bases  Runs allowed  Earned Runs  Earned Runs Avg  Combo guard  \\\n",
       "0           104           641          601             3.73            2   \n",
       "1            70           700          653             4.07            2   \n",
       "2            86           640          584             3.67           11   \n",
       "3            68           701          643             3.98            7   \n",
       "4            83           803          746             4.64            7   \n",
       "\n",
       "   Shoutout  Saves  Errors  Wins  \n",
       "0         8     56      88    95  \n",
       "1        12     45      86    83  \n",
       "2        10     38      79    81  \n",
       "3         9     37     101    76  \n",
       "4        12     35      86    74  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import linear_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#data with 30 rec -> train ?\n",
    "#"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Coefficients:  [ 1.88062387e-01 -3.98228958e-02  6.15850952e-02 -4.32608878e-01\n",
      "  2.20878969e-01 -1.65410311e-01 -5.40624894e-03  1.56322951e-02\n",
      "  1.11221539e-02  2.23489609e-03  3.07662834e-01 -6.66032806e+01\n",
      "  1.17453556e+00 -1.66069531e-01  5.77827430e-01 -7.35335374e-02]\n"
     ]
    }
   ],
   "source": [
    "regr = linear_model.LinearRegression()\n",
    "x = np.asanyarray(data)\n",
    "y = np.asanyarray(target)\n",
    "regr.fit(x,y)\n",
    "# The coefficients\n",
    "print ('Coefficients: ', regr.coef_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_hat= regr.predict(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame(y_hat,columns=[\"Wins_Prediction\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Wins_Prediction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>74.701101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>87.763708</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>84.537218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>66.151889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>54.119431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>92.395327</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>92.143619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>88.078354</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>77.303612</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>70.873738</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Wins_Prediction\n",
       "0        74.701101\n",
       "1        87.763708\n",
       "2        84.537218\n",
       "3        66.151889\n",
       "4        54.119431\n",
       "5        92.395327\n",
       "6        92.143619\n",
       "7        88.078354\n",
       "8        77.303612\n",
       "9        70.873738"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#lets do the prediction of test data\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
